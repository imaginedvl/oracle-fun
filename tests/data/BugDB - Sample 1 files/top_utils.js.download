///////////////////////////////////////////////////////////////////////////////////////////////
// $Header: /u01/app/cvs/BugDev/js/1.0.26/top_utils.js,v 1.8 2003/06/11 22:10:12 jennor Exp $
// Name: top_utils.js
//
// Purpose
// Java Script for initialization and help frame.
///////////
// History
/////////// Seikenbe Creation
//
// abrahmac 20-Dec-99 Fixed the bug# 987972.
//                    Added uid and code_list for test_status and test_priority
// abrahmac 23-Dec-99 Fixed the bug# 1099665.
//                    Added the function SetCookie(cName, cValue).
// abrahmac 28-Dec-99 Fixed the bug# 755284.
//                    Arrangement for 'Previous' button in
//                    CheckForQueryResults() and CheckForQueryResultsApply().
// abrahmac 29-Dec-99 Fixed the bug# 768768. Added help for upd_by
// lmorin   Jan 4 99  Fix bug 1070683 - URL not found when running w/ 4.0.8.1
// abrahmac 10-Jan-00 Bug# 1059080 field_names . Now it displays names +
//                    the count of the fields that failed validation.
// abrahmac 25-Jan-00 Bug# 1141209. Leading spaces are removed before calling
//                    the showbug routine.
// abrahmac 02-feb-00 Bug# 1082311. Two help files for rdbms_version
// ssatam   17-aug-00 Help file for Migration Flag
// lmorin   27-jun-02 Append .html to component code LOV file name.
// lmorin   15-jul-02 change url for edit and escalation packages
// jennor   13-dec-02 AITSD Bug Release 1
//
// nritter  30-Oct-03 SR#2298585 New Rules for Subcomponent Entry
// ratvadiv 10-Jun-16 Bug#23225175 Checkbox for select-unselect all option in summary rpt
// ratvadiv 19-Jul-16 Bug#24296811 Next button stopped working
// ratvadiv 31-aug-16 Bug#24007011 DELINKING BUG TYPE AND STATUS
// ratvadiv 29-sep-16 Recheckin for Bug#24007011 DELINKING BUG TYPE AND STATUS
// RATVADIV 13-Oct-16 Bug 24819208 - BUGAU ORA-6502 ERROR
// RATVADIV 13-Dec-16 Bug 24693484 - CREATE BUG SCREEN ALLOWS INVALID SUBCOMPONENTS
// RATVADIV 15-Dec-16 Bug 17194395 - NOT POSSIBLE TO DUPLICATE BUGS THAT HAVE MISSING FIELDS IN THEM
// RATVADIV 15-Dec-16 Bug 13573828 - ADD PRODUCT GROUP TO CREATE BUG/ENHANCEMENT SCREENS
// SCKRISHN 28-Mar-17 Bug 10193749 - PERFORMANCE ISSUE-ALLOW VALUES TO BE ENTERED BEFORE PICK LIST INITIALISED
// SCKRISHN 27-Apr-17 Bug 10193749 - PERFORMANCE ISSUE-ALLOW VALUES TO BE ENTERED BEFORE PICK LIST INITIALISED
// RATVADIV 14-Dec-17 Enh 20958442 - ADD CONFIRMATION DIALOG ON BUG BODY SAVE, WHEN AUTO-HIDE IS TRIGGERED
// RADHCHAN 01-Mar-18 Bug 27533191 - On-Change trigger not fired when selecting values from CUSTOMISED-LIST
// RATVADIV 13-Mar-18 Enh 27441367 - ADD AN ADDITIONAL SQL CLAUSE FIELD TO DETAILED QUERY SCREEN
// RATVADIV 25-Oct-18 Bug 16092195 - ERROR MESSAGE WHEN ASSIGNEE IS BLANK SAYS PROGRAMMER
// RATVADIV 15-Nov-18 Bug 28927490 - WHEN BUGTYPE IS NOT SELECTED IN CREATE REQUEST PAGE, ERROR MESSAGE SHOWS 'UNDEFINED' FOR FIELD NAME
// LVATTAKU 15-Apr-19 Enh 24839941 - ENHANCEMENT: DISPLAY DATE AND TIME IN BUGDB FOR LOCAL TIME ZONE INSTEAD OF PST
// LVATTAKU 18-JUN-19 Enh 16246522 - NEW COLUMNS SELECTED ARE CACHED, NOT FOR A PARTICULAR USER PROFILE
// LVATTAKU 20-JUN-19 Bug 29938310 - THROWING ERROR I=4-ORA-01007: VARIABLE NOT IN SELECT LISTRECCNT1, CID_ARR(I)=101, LOC=20 IN DETAIL REPORT EXTERNAL
// LVATTAKU 30-SEP-19 Enh 30051808 - BUGDB TO ALLOW TIMEZONE SELECTION PER USER (IN PREFERENCES/PROFILE)
// LVATTAKU 15-OCT-19 Bug 29554627 - ALL ENTERED INFORMATION IS LOST DURING BUG UPDATE (TEMPLATE POPS UPS) 
////////////////////////////////////////////////////////////////////////////////////////////////////

var default_column = new Array(20);

var server_html_path = "/bug-static/";
var server_lists_path = "/bug-lists/";
var server_img_path = "/bug-imgs/";
var server_help_path = "/bug-help/";
var server_edit_package_path = "/pls/bugav/webbug_edit.";
var server_esc_package_path = "/pls/bugav/webbug_escalation.";

customize_window = null;
done_loading = false;
field_to_fill = null;
validate_subcomps = false;

function StripWhitespace(text_field)
{
    var l;
    var i;
    var first_non_space;
    var last_non_space;

    l = text_field.value.length;

    first_non_space = l;

    for (i=0; i<l; i++)
    {
        if (text_field.value.charAt(i) != ' ')
        {
            first_non_space = i;
            break;
        }
    }

    last_non_space = l-1;
    for (i=l-1; i>=0; i--)
    {
        if (text_field.value.charAt(i) != ' ')
        {
            last_non_space = i;
            break;
        }
    }

    return text_field.value.substring(first_non_space, last_non_space+1);
}

// Bug # 755284 : Added parameter 'action' for Next/Previous action
function CheckForQueryResults(action, qid, n)
{
    if (top.opener != null && top.opener.query_id != null)
        if (top.opener.query_id == qid)
        {
           var search_table = top.opener.document.results.elements["rptnos"];
		   if( search_table.length == undefined) // Bug24296811 when there is only one element js receives it as string. so it has to be converted to array forcefully.
				search_table = [].concat(search_table);

		   if (action == 'Next')
              top.bugframe.document.next_args.elements[0].value = search_table[n].value;
           else
              top.bugframe.document.prev_args.elements[0].value = search_table[n].value;
            return true;
        }

    alert('The ' + action + ' button may not currently be used, because the parent window no longer contains the associated Summary Report.');
    return false;
}

// Bug # 755284 : Added parameter 'action' for Next/Previous action
function CheckForQueryResultsApply(action, qid, n)
{
    if (top.opener != null && top.opener.query_id != null)
        if (top.opener.query_id == qid)
        {
           var search_table = top.opener.document.results.elements["rptnos"];
		   if( search_table.length == undefined) // Bug24296811 when there is only one element js receives it as string. so it has to be converted to array forcefully.
				search_table = [].concat(search_table);

		   top.bugframe.document.bugform.elements[0].value = search_table[n].value;
           top.bugframe.document.bugform.elements[1].value = n+1;
           return true;
        }

    alert('The ' + action + ' button may not currently be used, because the parent window no longer contains the associated Summary Report.');
    return false;
}


function AddId(id)
{
    self.lists.custom_ids[self.lists.custom_ids.length] = id;

    SaveCustom();
    customize_window.custom.location.href = customize_window.custom.location.href;
}

function RemoveId(n)
{
    self.lists.custom_ids[n] = null;
    SaveCustom();
    customize_window.custom.location.href = customize_window.custom.location.href;
}

function SaveCustom()
{
    cookie = '';
    for (c=0; c < top.lists.custom_ids.length; c++)
    {
        if (top.lists.custom_ids[c] != null)
        {
            if (cookie != '')
                cookie += '|';

            cookie += top.lists.custom_ids[c];
        }
    }

    cookie = self.lists.cookie_name + '=' + cookie + ';expires=Fri, 25 Dec 2099 00:00:00 GMT;';

    document.cookie = cookie;

}

function CustomizeActionAdd(index, id, desc)
{
    return "top.opener.AddId('" + id + "')";

}

function CustomizeActionRemove(index, id, desc)
{
    return "top.opener.RemoveId('" + index + "')";
}

function BugformAction(index, id, desc)
{
    return "top.FillAndAdvance('" + id + "', '" +
        desc + "')";
}

function QueryformAction(index, id, desc)
{
        return "top.FillForQuery('" + id + "', ',')";
}

function MassUpdFormAction(index, id, desc)
{
        return "top.FillForMassUpd('" + id + "', '" + desc + "')";
}


function IdDesc(Id, Desc)
{
    this.Id = Id;
    this.Desc = Desc;
    this.Display = DisplayIdDesc;
}

function DisplayIdDesc(w, action, display_id_on_left)
{

// In query mode, leave out the pick list entries that reset a field's value to be empty
    if (query_mode || mass_update_mode)
        if (this.Id == '')
            return;
w.document.write("<NOBR><a href=\"javascript:" + eval(action + "(null,'" + this.Id + "','" + this.Desc + "')") + "; try { top.bugframe.document.bugform.elements[top.field_to_fill].onchange(); } catch(err) { } \" name=\"p" + this.Id +
       "\"><img  title=\""+ this.Id + ", " + this.Desc +"\"" +" src=\"" + left_arrow + "\" width=20 height=20 border=0 hspace=3 align=\"top\"></A>");

    if (display_id_on_left)
    {
        if (this.Id != '')
            w.document.write(this.Id + '&nbsp;-&nbsp;');
    }

    w.document.write(this.Desc);

    if (!display_id_on_left)
    {
        if (this.Id != '')
            w.document.write('&nbsp;-&nbsp;' + this.Id);
    }

    w.document.writeln("</nobr><br>");
}


function CompCodeInfo(Id, Desc)
{
    this.IdDesc = new IdDesc(Id, Desc);
    this.Display = DisplayCompCodeInfo;
    this.GetDesc = GetCompCodeInfoDesc;
    this.GetId = GetCompCodeInfoId;
}

function GetCompCodeInfoDesc()
{
    return this.IdDesc.Desc;
}

function GetCompCodeInfoId()
{
    return this.IdDesc.Id;
}

function AddCompCodeInfo(Id, Desc)
{
    this.CompCodeInfoArray[this.CompCodeInfoArray.length] = new CompCodeInfo(Id, Desc);
}

function DisplayCompCodeInfo(w, action, display_id_on_left)
{
    this.IdDesc.Display(w, action, display_id_on_left);
}

function CompCodeInfoList(display_ids_on_left)
{
    this.CompCodeInfoArray = new Array;
    this.DisplayIdsOnLeft = display_ids_on_left;
    this.Add = AddCompCodeInfo;
    this.Display = DisplayCompCodeInfoList;
    this.GetDesc = GetCompCodeInfoListDesc;
    this.IsValidId = CompCodeInfoListIsValidId;
    this.Length = CompCodeInfoListLength;
    this.IdNum = CompCodeInfoListIdNum;
    this.DescNum = CompCodeInfoListDescNum;
}

function CompCodeInfoListDescNum(n)
{
    return this.CompCodeInfoArray[n].GetDesc();
}

function CompCodeInfoListIdNum(n)
{
    return this.CompCodeInfoArray[n].GetId();
}

function CompCodeInfoListLength()
{
    return this.CompCodeInfoArray.length;
}


function GetCompCodeInfoListDesc(p)
{
    for (i=0; i <this.CompCodeInfoArray.length; i++)
    {
        if (this.CompCodeInfoArray[i].GetId() == p)
            return this.CompCodeInfoArray[i].GetDesc();
    }

    return 'Invalid Value';
}

function CompCodeInfoListIsValidId(p)
{
    for (i=0; i <this.CompCodeInfoArray.length; i++)
    {
        if (this.CompCodeInfoArray[i].GetId() == p)
            return true;
    }
    return false;
}


function DisplayCompCodeInfoList(w, action)
{
    w.document.writeln('<FONT SIZE="-1">');

    for (i=0; i <this.CompCodeInfoArray.length; i++)
        this.CompCodeInfoArray[i].Display(w, action, this.DisplayIdsOnLeft);

    w.document.writeln('<BR CLEAR=ALL>');
    w.document.writeln('<BR>');

    w.document.writeln('</FONT>');
}

function Trim(n)
{
    top.bugframe.document.bugform.elements[n].value =
        StripWhitespace(top.bugframe.document.bugform.elements[n]);

    return true;
}

function ValidateMassUpdCompCode(n, list_uid_needed)
{
    var prod;

    prod = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;
    if (prod == '')
        return true;

    return ValidateId(n, list_uid_needed)
}


/* Removed by Jennor as part of AITSD Bug Release 1
   as I this does not appear to behave been used for sometime
   and requires modifiation between environments - yuk!

   //Added by Amy 3/22/99
	function CheckClosing(n1,n2, c_rptno)
	{
	bugno=c_rptno.value;
	url="http://bugdv.us.oracle.com/bugdev/plsql/webbug_edit.edit_info_top?rptno="+bugno+"&type=2";
	Trim(n1);
	Trim(n2);
	if ( top.bugframe.document.bugform.elements[n1].value ==80
	&&  top.bugframe.document.bugform.elements[n2].value ==5)
	{
	 alert("Closure of bugs using template");
	top.open(url,'bug_help','width=550,height=450,scrollbars=yes,resizable=yes,status=yes').focus();
	}
	return true;
 	}
*/

function ValidateId(n, list_uid_needed)
{
    Trim(n);
    if (list_uid_needed != top.lists.loaded_list  ||  !top.lists.data_done_loading)
    {
		if (n == top.bugframe.status_field ) {
			var product_id = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;
			var bug_type = ""; //For create screen bugtype will be null
			var screen_type = "";
			if (top.bugframe.document.bugform.elements[top.bugframe.bugtype_field])
			{
				bug_type = top.bugframe.document.bugform.elements[top.bugframe.bugtype_field].value;
			}
			else
			{
				screen_type = "C";
			}
			var gp_value = top.bugframe.document.bugform.elements[top.bugframe.genport_field].value;
			var status = top.bugframe.document.bugform.elements[n].value;
			$.ajax({url:document.location.protocol + "//" + document.location.host
								   + "/pls/bug/webbug_status.get_status_desc?p_product_id=" + product_id + "&p_bug_type=" + bug_type + "&p_screen_type=" + screen_type +"&p_gp_val=" + gp_value + "&p_status_code=" + status , success: function(result){

				top.bugframe.document.bugform.elements[n+1].value  = result;
				if (result.indexOf("Invalid Value") == -1) {
					top.bugframe.document.hiddenform.elements[n].value = 'Y';
				}
				else
				{
					top.bugframe.document.hiddenform.elements[n].value = 'N';
					top.bugframe.document.bugform.elements[n].focus();
				}

			}});
		}
		else{
			alert('The validation data in the pick list frame has not yet finished initializing.\n' +
              'Please wait and try again.');
			top.bugframe.document.bugform.elements[n].value = '';
			top.bugframe.document.bugform.elements[n].focus();

		}

        return true;
    }

    id = top.bugframe.document.bugform.elements[n].value.toUpperCase();

    if (mass_update_mode && top.bugframe.document.bugform.elements[n].value == '')
    {
        top.bugframe.document.bugform.elements[n+1].value = '';
        top.bugframe.document.hiddenform.elements[n].value = 'Y';
        return true;
    }

    top.bugframe.document.bugform.elements[n].value=id;
    top.bugframe.document.bugform.elements[n+1].value = self.lists.validate_list.GetDesc(id);

    if (self.lists.validate_list.IsValidId(id))
        top.bugframe.document.hiddenform.elements[n].value = 'Y';
    else
        top.bugframe.document.hiddenform.elements[n].value = 'N';

    return true;
}

function ValidateSub(n, list_uid_needed, reqflag)
{
    if (reqflag === undefined)
		reqflag = 'N';

	Trim(n);

   	if (top.bugframe.document.bugform.elements[n].value == '' || top.bugframe.document.bugform.elements[n].value==null)
    {
	  top.bugframe.document.bugform.elements[n+1].value  = '';
	  if (reqflag == 'N')
         top.bugframe.document.hiddenform.elements[n].value = 'Y';
	  else
         top.bugframe.document.hiddenform.elements[n].value = 'N'; // mandatory and missing
	  return true;
	}

    if (list_uid_needed != top.lists.loaded_list  ||  !top.lists.data_done_loading   )
    {

   		top.bugframe.document.hiddenform.elements[n].value = 'N';
		//alert('Invalid Value.\n' +'');
		//top.bugframe.document.bugform.elements[n].value = '';
		top.bugframe.document.bugform.elements[n+1].value  = 'Invalid Value';
		top.bugframe.document.bugform.elements[n].focus();
        return true;
    }

    id = top.bugframe.document.bugform.elements[n].value.toUpperCase();

    if (mass_update_mode && top.bugframe.document.bugform.elements[n].value == '')
    {
        top.bugframe.document.bugform.elements[n+1].value = '';
        top.bugframe.document.hiddenform.elements[n].value = 'Y';
        return true;
    }

    top.bugframe.document.bugform.elements[n].value=id;
    top.bugframe.document.bugform.elements[n+1].value = self.lists.validate_list.GetDesc(id);

    if (self.lists.validate_list.IsValidId(id))

        top.bugframe.document.hiddenform.elements[n].value = 'Y';

    else
		top.bugframe.document.hiddenform.elements[n].value = 'N';

    return true;

}

function ClearSubcompFields()
{

	if (top.bugframe.document.bugform.elements[top.bugframe.subcomp_code_field] != null)
    {
        top.bugframe.document.bugform.elements[top.bugframe.subcomp_code_field].value = '';
        top.bugframe.document.bugform.elements[top.bugframe.subcomp_code_field+1].value = '';
        top.bugframe.document.hiddenform.elements[top.bugframe.subcomp_code_field].value = 'Y';
    }

	if (mass_update_mode)
	{
	if (top.bugframe.document.bugform.elements[top.bugframe.subcomponent_code_field] != null)
    {
        top.bugframe.document.bugform.elements[top.bugframe.subcomponent_code_field].value = '';
        top.bugframe.document.bugform.elements[top.bugframe.subcomponent_code_field+1].value = '';
        top.bugframe.document.hiddenform.elements[top.bugframe.subcomponent_code_field].value = 'Y';
    }
    }
}

function ClearCreateProdFields()
{
    if (top.bugframe.document.bugform.elements[top.bugframe.product_id_field] != null)
    {
        top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value = '';
        top.bugframe.document.bugform.elements[top.bugframe.product_id_field+1].value = '';

        if (mass_update_mode)
            top.bugframe.document.hiddenform.elements[top.bugframe.product_id_field].value = 'Y';
        else
            top.bugframe.document.hiddenform.elements[top.bugframe.product_id_field].value = 'N';
    }

    ClearCreateCompFields();
}

function ClearCreateCompFields()
{
    if (top.bugframe.document.bugform.elements[top.bugframe.component_code_field] != null)
    {
        top.bugframe.document.bugform.elements[top.bugframe.component_code_field].value = '';
        top.bugframe.document.bugform.elements[top.bugframe.component_code_field+1].value = '';

        if (mass_update_mode)
            top.bugframe.document.hiddenform.elements[top.bugframe.component_code_field].value = 'Y';
        else
            top.bugframe.document.hiddenform.elements[top.bugframe.component_code_field].value = 'N';
    }

    ClearSubcompFields();
}

function ClearCompFields()
{
    if (top.bugframe.document.bugform.elements[top.bugframe.component_code_field] != null)
    {
        top.bugframe.document.bugform.elements[top.bugframe.component_code_field].value = '';
        top.bugframe.document.bugform.elements[top.bugframe.component_code_field+1].value = '';


        if (mass_update_mode)
            top.bugframe.document.hiddenform.elements[top.bugframe.component_code_field].value = 'Y';
        else
            top.bugframe.document.hiddenform.elements[top.bugframe.component_code_field].value = 'N';
    }

    ClearSubcompFields();
}

function ClearCreatePGFields()
{
    if (top.bugframe.document.bugform.elements[top.bugframe.product_group_id_field] != null)
    {
        top.bugframe.document.bugform.elements[top.bugframe.product_group_id_field].value = '';
        top.bugframe.document.bugform.elements[top.bugframe.product_group_id_field+1].value = '';
    }
    ClearCreateProdFields();
}
function FillAndAdvance(id, desc)
{
    var field;

    if (!top.bugframe.done_loading)
    {
        alert('The browser frames have not yet finished initializing.\n' +
              'Please wait and try again.');
        return;
    }

    field = field_to_fill;

    top.bugframe.document.hiddenform.elements[field].value = 'Y';

    top.bugframe.document.bugform.elements[field].value = id;

    top.bugframe.document.bugform.elements[field+1].value = desc;

     if (field == top.bugframe.product_suite_id_field)
    {
       ClearCreatePGFields();
    }
    else if (field == top.bugframe.product_group_id_field)
    {
       ClearCreateProdFields();
    }

    else if (field == top.bugframe.product_id_field)
    {
        ClearCompFields();
    }

    else if (field == top.bugframe.component_code_field)
    {
        ClearSubcompFields();
    }

    if (top.bugframe.auto_advance)
    {
        if ((field+2) <= top.bugframe.max_field)
        {
// For IE 3.x (and maybe even 4.x??), it's important that the focus function
// be called first.  Otherwise, we end up with the wrong list displayed.
//          SetList(field+2);
            top.bugframe.document.bugform.elements[field+3].focus();
            SetList(field+2);
        }
    }
    else
    {
          top.bugframe.document.bugform.elements[field].focus();
          SetList(field);
    }
}
function Check4kLimit(field)
{
   s = new String("");
   s = field.value;
   if (s.length >3995 )
   {
       alert("Text cannot exceed 4000 characters. Please shorten your text.");
       field.focus();
       field.select();
       return false;
   }
  return true;
}
function Check2kLimit(field)
{
   s = new String("");
   s = field.value;
   if (s.length >1975 )
   {
       alert("Text cannot exceed 2000 characters. Please shorten your text.");
       field.focus();
       field.select();
       return false;
   }
  return true;
}

function FillForQuery(id)
{
    var field;
    var sep = ',';

    if (!top.bugframe.done_loading)
    {
        alert('The browser frames have not yet finished initializing.\n' +
              'Please wait and try again.');
        return;
    }

    field = field_to_fill;

    if (top.bugframe.document.bugform.elements[field].value != '')
    {
        var l = top.bugframe.document.bugform.elements[field].value.length;

        // Check for the separator already at the end (assume single-char separator)
        if (top.bugframe.document.bugform.elements[field].value.substring(l-1, l) != sep)
            top.bugframe.document.bugform.elements[field].value =
                top.bugframe.document.bugform.elements[field].value + sep;

        top.bugframe.document.bugform.elements[field].value =
            top.bugframe.document.bugform.elements[field].value + id;
    }
    else
        top.bugframe.document.bugform.elements[field].value = id;

}

function FillForMassUpd(id, desc)
{
    var field;
    var sep = ',';

    if (!top.bugframe.done_loading)
    {
        alert('The browser frames have not yet finished initializing.\n' +
              'Please wait and try again.');
        return;
    }

    field = field_to_fill;

    top.bugframe.document.bugform.elements[field].value = id;
    top.bugframe.document.bugform.elements[field+1].value = desc;

    if (field == top.bugframe.product_id_field)
    {
        ClearCompFields();
    }
    else if (field == top.bugframe.component_code_field)
    {
        ClearSubcompFields();
    }
}


function SetStatusMsg(msg)
{
    top.status = msg;
}

function SetList(n, single_value)
{
    if (current_list == n)
        return true;

    top.lists.done_loading = false;

    field_to_fill = n;

    self.lists.location.href = eval(top.bugframe.lists[n]);
    current_list = n;
    force_full_list = false;

    return true;
}

function SetStatusList(n, product_id, bug_type, gp_value, screen_type) {

   bug_type = bug_type || "";
   gp_value = gp_value || "";
   screen_type = screen_type || "";

   // screen type denotes edit bug screen.
   // bug fix 24819208 - In edit bug, list needs to be reloaded if there is a status related error and focus was already in status field.
   if (screen_type){
	   if (current_list == n) {
			return true;
		}
   }
   top.lists.done_loading = false;

   field_to_fill = n;
   if (screen_type) {
      self.lists.location.href = document.location.protocol + "//" + document.location.host
                               + "/pls/bug/webbug_status.get_status_list_p_html?p_product_id=" + product_id + "&p_bug_type=" + bug_type + "&p_gp_val=" + gp_value + "&p_screen_type=" + screen_type;
   } else {
      self.lists.location.href = document.location.protocol + "//" + document.location.host
                               + "/pls/bug/webbug_status.get_status_list_p_html?p_product_id=" + product_id + "&p_bug_type=" + bug_type + "&p_gp_val=" + gp_value;

   }
   current_list = n;
   force_fill_list = false;

   return true;
}

function SetListEmpty()
{
    self.lists.location.href = empty_list;
    current_list = -1;
    force_full_list = false;

    return true;
}

function GetComponentListURL()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    if (self.lists.loaded_list == top.product_id_list_uid)
        ValidateId(top.bugframe.product_id_field, top.product_id_list_uid);

	if (top.bugframe.document.hiddenform.elements[top.bugframe.product_id_field].value == 'N')
		return(comp_help);
   else
        suffix = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value + '.html';

    return (component_code_list + suffix);
}

function GetProductGroupListURL()
{
    if (self.lists.loaded_list == top.product_suite_id_list_uid)
        ValidateId(top.bugframe.product_suite_id_field, top.product_suite_id_list_uid);
    if (top.bugframe.document.hiddenform.elements[top.bugframe.product_suite_id_field].value == 'N')
        suffix = '.html';
    else
        suffix = top.bugframe.document.bugform.elements[top.bugframe.product_suite_id_field].value + '.html';
    return (server_lists_path + 'product_group_id_list' + suffix);
}

function GetProductListURL()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    if (self.lists.loaded_list == top.product_suite_id_list_uid)
        ValidateId(top.bugframe.product_suite_id_field, top.product_suite_id_list_uid);

    if (top.bugframe.document.hiddenform.elements[top.bugframe.product_suite_id_field].value == 'N')
        suffix = '.html';
    else
        suffix = top.bugframe.document.bugform.elements[top.bugframe.product_suite_id_field].value + '.html';

    return (server_lists_path + 'product_id_list' + suffix);
}

// Product list filtered by Product group ID or Product suite ID -- ER 13573828
function GetFilteredProductListURL()
{
    var ps_id, pg_id;

    pg_id = top.bugframe.document.bugform.elements[top.bugframe.product_group_id_field].value;
    ps_id = top.bugframe.document.bugform.elements[top.bugframe.product_suite_id_field].value;

	if (pg_id != '' && top.bugframe.document.hiddenform.elements[top.bugframe.product_group_id_field].value == 'Y')
		suffix = '_' + top.bugframe.document.bugform.elements[top.bugframe.product_group_id_field].value + '.html'; // Prod group specific product list
	else if (ps_id != '' && top.bugframe.document.hiddenform.elements[top.bugframe.product_suite_id_field].value == 'Y')
		suffix = top.bugframe.document.bugform.elements[top.bugframe.product_suite_id_field].value + '.html'; // Prod suite specific product list
	else
		suffix = '.html'; // global product list

    return (server_lists_path + 'product_id_list' + suffix);
}

// This function is specific to simple query screen where multi select is allowed product groups field
function GetGroupProductListURL()
{
// Here because IE 4.0 gets onFocus event for product group field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    id = top.bugframe.document.bugform.elements[top.bugframe.product_group_id_field].value;

    n = new Number(id);

    if (isNaN(n))
        return product_query_help;
    else if (n == 0)
        return (server_lists_path + 'product_id_list.html');

    else
        return (server_lists_path + 'product_id_list_'+ n + '.html');
}

function GetQueryComponentListURL()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    id = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;

    n = new Number(id);

    if (n == 0 || isNaN(n))
        return component_code_query_help;
    else
        return (component_code_list + n + '.html');
}

function GetQueryCompListURLExt()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    id = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;

    n = new Number(id);

    if (n == 0 || isNaN(n))
        return component_code_query_help;
    else
        return ('webbug_reports_ext.component_pick_list?p_product_id=' + n);
}

function GetMassUpdComponentListURL()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    id = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;

    n = new Number(id);

    if (n == 0 || isNaN(n))
        return component_code_mass_upd_help;
    else
        return (component_code_list + n + '.html');
}

function GetQuerySubcomponentListURL()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    var p_id, p_n, c_code;

    p_id = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;
    c_code = top.bugframe.document.bugform.elements[top.bugframe.component_code_field].value;

    p_n = new Number(p_id);

    if (p_n == 0 || isNaN(p_n) || c_code == '')
        return subcomp_query_help;
    else
        // There may be commas in the component list, meaning that there's not a single
        // value.  This will always fail to find a subcomponent list within the directory.
        //
        return (subcomp_dir_list);
}

function GetQuerySubcompListURLExt()
{
// Here because IE 4.0 gets onFocus event for Component field before the onChange event for the
// product_id field is executed, thus the hidden validation field isn't yet set properly.

    var p_id, p_n, c_code;

    p_id = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;
    c_code = top.bugframe.document.bugform.elements[top.bugframe.component_code_field].value;

    p_n = new Number(p_id);
    c_c = new String(c_code);

    if (p_n == 0 || isNaN(p_n) || c_c.indexOf(',')> -1)
        return subcomp_query_help;
    else
        // There may be commas in the component list, meaning that there's not a single
        // value.  This will always fail to find a subcomponent list within the directory.
        //
        return ('webbug_reports_ext.subcomp_pick_list?p_product_id=' + p_id + '&p_comp_code=' + c_code);
}
function CustomizeIds()
{
    customize_window = self.window.open(customize_ids_path ,'customize','width=680,height=500,resizable=yes,status=yes');
    customize_window.focus();
}

function Done()
{
    force_full_list = false;
    ReloadLists();

    CloseCustomizeWindow();
}

function CloseCustomizeWindow()
{
    if (customize_window != null && !customize_window.closed)
        customize_window.close();
}

function OutputHeader(w, onclick, switch_text, title, allow_switch, allow_customize, is_custom_list)
{
    w.document.writeln('<CENTER>');

    if (allow_customize)
    {
        w.document.writeln('<BR><FONT SIZE="-1">');
        if (allow_switch)
        {
             w.document.writeln('<A HREF="javascript:' + onclick + '">' +
                switch_text + '</A><BR><BR>');
        }

        w.document.writeln('<A HREF="javascript:top.CustomizeIds()">Customize Me!</A>');
        w.document.writeln('</FONT>');
    }
    w.document.writeln('<BR>');
    w.document.writeln('<BR><B><FONT SIZE="+1">' + title + '</FONT></B><BR><BR>');
    if (is_custom_list)
        w.document.writeln('<I><FONT SIZE="-1">Customized List</FONT></I><P></CENTER>');
    else
        w.document.writeln('<I><FONT SIZE="-1">Full List</FONT></I><P></CENTER>');

    if (title == "Status") {
        w.document.writeln('<CENTER><P style="color: #a41e0d;"><I><FONT SIZE="-1">A restricted set of status codes applies to this <a href="#" id="statusListTip" target="_blank">Product</a></FONT></I><P></CENTER>');
    }
}

function DisplayIdList(w, id_list, custom_ids, title)
{
    if (query_mode)
        action = 'QueryformAction';
    else if (mass_update_mode)
        action = 'MassUpdFormAction';
    else
        action = 'BugformAction';

    if (custom_ids == null || custom_ids == '' || force_full_list == true)
    {
        if (custom_ids == null || custom_ids == '')
            allow_switch_to_custom = false;
        else
            allow_switch_to_custom = true;

        OutputHeader(w, 'top.SwitchToCustomList(self)', 'Switch to Customized List', title, allow_switch_to_custom, custom_ids != null, false);
        id_list.Display(w, action);
    }
    else
    {
        OutputHeader(w, 'top.SwitchToFullList(self)', 'Switch to Full List', title, true, true, true);
        DisplayCustomIds(custom_ids, id_list, self.lists, 'left', action);
    }
}

function DisplayIdListModified(w, id_list, custom_ids, title)
{
    if (query_mode)
        action = 'QueryformAction';
    else if (mass_update_mode)
        action = 'MassUpdFormAction';
    else
        action = 'BugformAction';

    if (custom_ids == null || custom_ids == '' || force_full_list == true)
    {
        if (custom_ids == null || custom_ids == '')
            allow_switch_to_custom = false;
        else
            allow_switch_to_custom = true;

        OutputHeader(w, 'top.SwitchToCustomList(self)', 'Switch to Customized List', title, true, false, true);
        id_list.Display(w, action);
    }
    else
    {
        OutputHeader(w, 'top.SwitchToFullList(self)', 'Switch to Full List', title, true, true, true);
        DisplayCustomIds(custom_ids, id_list, self.lists, 'left', action);
    }
}


function DisplayIdList_Product(w, id_list, custom_ids, title)
{
    if (query_mode)
        action = 'QueryformAction';
    else if (mass_update_mode)
        action = 'MassUpdFormAction';
    else
        action = 'BugformAction';

    if (custom_ids == null || custom_ids == '' || force_full_list == true)
    {
        if (custom_ids == null || custom_ids == '')
            allow_switch_to_custom = false;
        else
            allow_switch_to_custom = true;

         id_list.Display(w, action);
    }
    else
    {
         DisplayCustomIds(custom_ids, id_list, self.lists, 'left', action);
    }
}
function DisplayCustomIds(custom_ids, id_list, w, alignment, action)
{
    if (alignment == 'left')
    {
        arrow = left_arrow;
        align = 'LEFT';
    }
    else
    {
        arrow =  right_arrow;
        align = 'RIGHT';
    }

    w.document.writeln('<FONT SIZE="-1">');
    w.document.writeln('<P ALIGN=' + align + '>');

    for (c=0; c < custom_ids.length; c++)
    {
        for (i=0; i < id_list.Length(); i++)
        {
            if (id_list.IdNum(i) == custom_ids[c])
            {
                id = id_list.IdNum(i);

                w.document.writeln('<NOBR>');

                if (alignment == 'right')
                {

                    if (!id_list.DisplayIdsOnLeft)
                    {
                        if (id_list.IdNum(i) != '')
                            w.document.writeln(id_list.IdNum(i) + '&nbsp;-&nbsp;');
                        else
                            w.document.writeln('&nbsp;-&nbsp;');
                    }
                    w.document.write(id_list.DescNum(i));
                    if (id_list.DisplayIdsOnLeft)
                    {
                        if (id_list.IdNum(i) != '')
                            w.document.writeln('&nbsp;-&nbsp;' + id_list.IdNum(i));
                        else
                            w.document.writeln('&nbsp;-&nbsp;');
                    }
                }

                w.document.writeln("<a alt=\""+ id + ", " + id_list.DescNum(i) +"\"" +" href=\"javascript:" + eval(action + "(c,'" + id + "','" + id_list.DescNum(i) + "')") +
                     "; try { top.bugframe.document.bugform.elements[top.field_to_fill].onchange(); } catch(err) { } " + //added for Bug#27533191
                    "\" name=\"p" + id +
                    "\"><img title=\""+ id + ", " + id_list.DescNum(i) +"\"" +" src=\"" + arrow + "\" width=20 height=20 border=0 hspace=3 align=\"top\"></A>");

                if (alignment == 'left')
                {
                    if (id_list.DisplayIdsOnLeft && id_list.IdNum(i) != '')
                        w.document.write(id_list.IdNum(i) + '&nbsp;-&nbsp;');
                    w.document.writeln(id_list.DescNum(i));
                    if (!id_list.DisplayIdsOnLeft && id_list.IdNum(i) != '')
                        w.document.write('&nbsp;-&nbsp;' + id_list.IdNum(i));
                }

                w.document.writeln("</nobr><BR>");
                break;
            }
        }
    }
    w.document.writeln('<BR CLEAR=ALL>');
    w.document.writeln('<BR>');
    w.document.writeln('</FONT>');
}

function GetCookie(Name)
{
          var search = Name + "="

          if (document.cookie.length > 0) { // if there are any cookies
                    offset = document.cookie.indexOf(search)
                    if (offset != -1) { // if cookie exists
                              offset += search.length
                              // set index of beginning of value
                              end = document.cookie.indexOf(";", offset)
                              // set index of end of cookie value
                              if (end == -1)
                                        end = document.cookie.length
                              return unescape(document.cookie.substring(offset, end))
                    }
          }
          return null;
}

function Split(s, delim)
{

    a = new Array;
    pos = 0;
    curr_string = '';

    if (s == null)
        return a;

    for (c = 0; c < s.length; c++)
    {
        if (s.charAt(c) == delim)
        {
            a[pos] = curr_string;
            pos += 1;
            curr_string = '';
        }
        else if (c == (s.length - 1))
        {
            curr_string += s.charAt(c);
            a[pos] = curr_string;
        }
        else
        {
            curr_string += s.charAt(c);
        }
    }
    return a;

}

function ReloadLists()
{
    setTimeout('top.lists.location.href = top.lists.location.href', 300);
}

function SwitchToFullList()
{
    force_full_list = true;
    ReloadLists();
}

function SwitchToCustomList(w)
{
    force_full_list = false;
    ReloadLists();
}

function GetCustomIds()
{
    return Split(GetCookie(top.lists.cookie_name), '|');
}

function GetSavedColumns()
{
    return Split(GetCookie("DETAIL_REPORT_COL_SELECTION"), '|');
}

function DisplayHelpText(s)
{
    current_list = -1;
    force_full_list = false;
    top.lists.location.href = s;
    return true;
}

function DisplayHelpWindow(url)
{
    self.window.open(url,'bug_help','width=450,height=450,scrollbars=yes,resizable=yes,status=yes').focus();
}

function CheckForValue(field_num)
{
    Trim(field_num);

    if (top.bugframe.document.bugform.elements[field_num].value != '')
	   {

        top.bugframe.document.hiddenform.elements[field_num].value = 'Y';

	   }
    else
	   {

	    top.bugframe.document.hiddenform.elements[field_num].value = 'N';

	   }

 }

// function introduced as part of Bug fix 17194395
function SetFieldMandatory(field_num)
{
    top.bugframe.document.hiddenform.elements[field_num].value = 'N';
}

function ValidateBugformValues()
{
    var inv_count = 0;
    var field_names = ''; // Bug# 1059080
	var field_label = ''; // added for Bug fix 16092195

//Added by Amy 9/3/98
 if (mass_update_mode) {
    if(top.bugframe.document.bugform.skip_notification.checked == true) {
       if (!confirm("Email notifications will be skipped. Are you sure you want to do mass update?")) {
          return false;
       }
    }else{
       if (!confirm("Are you sure you want to do mass update?")) {
          return false;
       }
    }
 }
    for (i=0; i < top.bugframe.max_field; i++)
    {

        if (top.bugframe.document.hiddenform.elements[i].value == 'N')
        {
        //    alert('Value of ' + top.bugframe.document.hiddenform.elements[i].name + ' is: ' + top.bugframe.document.hiddenform.elements[i].value);
        //    alert('Field ' + i + ' is missing or invalid');
            // Bug fix 16092195 - alt text as field label to be shown in the error message
			if (top.bugframe.document.bugform.elements[i].alt != undefined && top.bugframe.document.bugform.elements[i].alt != '') // undefined check added for bug fix 28927490
			  field_label = top.bugframe.document.bugform.elements[i].alt;
			else
			  field_label = top.bugframe.document.bugform.elements[i].name;

			if (field_names == '') // Bug# 1059080
               field_names = field_label;
            else
               field_names = field_names + ', ' + field_label;
            inv_count++;
        }
    }


    if (inv_count > 0)
	{
	   if (inv_count == 1)
	   {
	   alert('There is ' + inv_count + ' field with invalid or missing value.\n\n' + ' (' + field_names + ')\n\n' + // Bug# 1059080
            'Please enter a valid value.\n\n');
        return false;
	   }
	   else
	   {
        alert('There are ' + inv_count + ' fields with invalid or missing values.\n\n' + ' (' + field_names + ')\n\n' + // Bug# 1059080
            'Please enter valid values for all required fields. \n\n');
        return false;
	   }
    }

    return true;
}

function InitBugEntryHiddenFields(mode)
{
  for (i = 0; i <= top.bugframe.max_field; i++)
    top.bugframe.document.hiddenform.elements[i].value = 'Y';

  top.bugframe.document.hiddenform.elements[top.bugframe.product_id_field].value = 'N'; // Bug fix 17194395
  top.bugframe.document.hiddenform.elements[top.bugframe.component_code_field].value = 'N'; // Bug fix 17194395

  top.bugframe.document.hiddenform.elements[top.bugframe.status_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.relstat_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.severity_code_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.os_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.genport_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.mail_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.customer_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.component_ver_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.rdbms_ver_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.subject_field].value = 'N';
  //modified by rnemmani 28-Dec-2004
   top.bugframe.document.hiddenform.elements[top.bugframe.security_field].value='N';


  if (mode == null)
    InitHiddenFieldsByValues();
  else
    InitHiddenFieldsByDefaults();
}

function InitEnhEntryHiddenFields(mode)
{
  for (i = 0; i <= top.bugframe.max_field; i++)
    top.bugframe.document.hiddenform.elements[i].value = 'Y';

  top.bugframe.document.hiddenform.elements[top.bugframe.relstat_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.enh_desir_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.os_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.mail_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.genport_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.component_ver_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.rdbms_ver_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.subject_field].value = 'N';

  if (mode == null)
    InitHiddenFieldsByValues();
  else
    InitHiddenFieldsByDefaults();
}

function InitBugPidHiddenFields(mode)
{
  for (i = 0; i <= top.bugframe.max_field; i++)
    top.bugframe.document.hiddenform.elements[i].value = 'Y';

  top.bugframe.document.hiddenform.elements[top.bugframe.product_id_field].value = 'N';
  top.bugframe.document.hiddenform.elements[top.bugframe.component_code_field].value = 'N';

  if (mode == null)
    InitHiddenFieldsByValues();
  else
    InitHiddenFieldsByDefaults();
}


function InitBugEditHiddenFields(mode)
{
// All Edit fields are valid by definition, since they come out of the db.
// Since you can't leave the edit page [by pressing Submit] without having
// all hiddenform values as 'Y', we can assume that that they're still all
// 'Y'.

  for (i = 0; i <= top.bugframe.max_field; i++)
//  for (i = 0; i < 52; i++)    ssatam changed to below line
//  for (i = 0; i < 55; i++)
    top.bugframe.document.hiddenform.elements[i].value = 'Y';

}

function InitMassUpdHiddenFields(mode)
{
//  All MassUpd fields start out blank, and get reset to blank, thus all are valid.

  for (i = 0; i <= top.bugframe.max_field; i++)
    top.bugframe.document.hiddenform.elements[i].value = 'Y';

}


function InitHiddenFieldsByValues()
{
  for (i = 0; i <= top.bugframe.max_field; i++)
  {
    if (top.bugframe.document.bugform.elements[i].value != '')
      top.bugframe.document.hiddenform.elements[i].value = 'Y';
    if (top.bugframe.mail_field != null && i == top.bugframe.mail_field)
    {
      if (top.bugframe.document.bugform.elements[i].value == '')
        top.bugframe.document.hiddenform.elements[i].value = 'Y';
    }
  }
}

function InitHiddenFieldsByDefaults()
{
  for (i = 0; i <= top.bugframe.max_field; i++)
  {
    if (top.bugframe.document.bugform.elements[i].defaultValue != '')
      top.bugframe.document.hiddenform.elements[i].value = 'Y';
    if (top.bugframe.mail_field != null && i == top.bugframe.mail_field)
    {
      if (top.bugframe.document.bugform.elements[i].defaultValue == '')
        top.bugframe.document.hiddenform.elements[i].value = 'Y';
    }
  }
}

function SetSelected(sel, val)
{
    for (var i = 0; i < sel.options.length; i++)
    {
        if (sel.options[i].value == val)
        {
            sel.options[i].selected = true;
            sel.options[i].defaultSelected = true;
            return;
        }
    }

}

function display_subcomps()
{
    var prod;
    var comp;

    validate_subcomps = false;

    prod = top.bugframe.document.bugform.elements[top.bugframe.product_id_field].value;
    comp = top.bugframe.document.bugform.elements[top.bugframe.component_code_field].value.toUpperCase();

    if (prod == '' || comp == '')
    {
        if (mass_update_mode)
            top.lists.location.href = subcomp_mass_upd_help;
        else
            top.lists.location.href = subcomp_help;

        return;
    }

    if (top.lists.subcomp_dir[prod] == null)
    {
        if (mass_update_mode)
            top.lists.location.href = subcomp_mass_upd_help;
        else
            top.lists.location.href = subcomp_freeform_help;
    }
    else
    {
        var subcomp_list = null;

        for (i=0; i < top.lists.subcomp_dir[prod].length; i++)
        {
            if (top.lists.subcomp_dir[prod][i] == comp)
            {
                subcomp_list = subcomp_code_list + prod + '_' + comp + '.html';
                break;
            }
        }

        if (subcomp_list == null)
            if (mass_update_mode)
                top.lists.location.href = subcomp_mass_upd_help;
            else
                top.lists.location.href = subcomp_freeform_help;
        else
        {
            validate_subcomps = true;
            top.lists.location.href = subcomp_list;
        }
    }

}

function ValidateSubcomp(n, uid_needed)
{
    if (validate_subcomps)
        return ValidateId(n, uid_needed);
    else
    {
        top.bugframe.document.hiddenform.elements[n].value = 'Y';
        return true;
    }
}

function OpenHideUnhideWindow(rptno)
{
    self.window.open(hide_or_unhide_path + '?rptno=' + rptno, 'hide_unhide', 'width=550,height=500,resizable=1,scrollbars=1').focus();
}

function DoneWithHideUnhideWindow()
{
    self.opener.bugframe.location.reload(true);
    self.close();
}

function OpenChangeLineTypeWindow(rptno)
{
    self.window.open(change_line_type_path + '?r_rptno=' + rptno, 'change_line_type', 'width=550,height=500,resizable=1,scrollbars=1').focus();
}

function DoneChangeLineTypeWindow()
{
    self.opener.bugframe.location.reload(true);
    self.close();
}

function OpenEditTextWindow(rptno)
{
    self.window.open(edit_text_path + '?r_rptno=' + rptno, 'edit_text', 'width=550,height=500,resizable=1,scrollbars=1').focus();
}

function DoneEditTextWindow()
{
    self.opener.bugframe.location.reload(true);
    self.close();
}

function OpenEscWindow(rptno)
{
    self.window.open(escalate_path + '?pRptno_in=' + rptno, 'escalate_bug', 'width=600,height=500,resizable=yes,scrollbars=yes,toolbar=yes,status=yes').focus();
}

function DoneEscWindow()
{
    self.opener.bugframe.location.reload(true);
    self.close();
}

function CheckForSelectedLines()
{
    if (self.document.lineform.linenums.selectedIndex == -1)
    {
        alert("You must select at least one line");
        return false;
    }
    else
        return true;
}


function SetChecks(val)
{
    var search_table = self.document.results.elements["rptnos"];
    if( search_table.length == undefined) // Bug24296811 when there is only one element js receives it as string. so it has to be converted to array forcefully.
		search_table = [].concat(search_table);

	for (i=0; i < search_table.length; i++)
    {
		try { if (document.getElementById('data').getElementsByTagName('TR')[i].style.display != 'none') {
				search_table[i].checked = val;  } }
		catch(err) {  search_table[i].checked = val;  }
    }
	self.document.getElementById("select_all_option").checked = val;
}

function SetChecks200(val)
{
var count_bugs = 0;
var search_table = self.document.results.elements["rptnos"];
if( search_table.length == undefined) // Bug24296811 when there is only one element js receives it as string. so it has to be converted to array forcefully.
		search_table = [].concat(search_table);

if (val == 1)
{
    for (i=0; i < search_table.length; i++)
      {
        if (count_bugs < 200 && (document.getElementById('data').getElementsByTagName('TR')[i].style.display != 'none')) {
			  search_table[i].checked = val;
			  count_bugs = count_bugs +1;}
        else
              { search_table[i].checked = 0; }
      }
}
  else
{    for (i=search_table.length-1; i >=0 ; i--)
      {
        if (count_bugs < 200 && (document.getElementById('data').getElementsByTagName('TR')[i].style.display != 'none')) {
			  search_table[i].checked = 1;
			  count_bugs = count_bugs +1;}
        else

              {search_table[i].checked = 0; }
      }
}
	if (search_table.length == 200)
		self.document.getElementById("select_all_option").checked = true;
	else
		self.document.getElementById("select_all_option").checked = false;
}

function AtLeastOneCheck()
{
    var search_table = self.document.results.elements["rptnos"];
	if( search_table.length == undefined) // Bug24296811 when there is only one element js receives it as string. so it has to be converted to array forcefully.
		search_table = [].concat(search_table);

	for (i=0; i < search_table.length; i++)
    {
        if (search_table[i].checked == true)
            return true;
    }

    alert('You must select at least one record.');
    return false;
}

function MassUpdate()
{

    if (AtLeastOneCheck())
    {
       var search_table = self.document.results.elements["rptnos"];
	   if( search_table.length == undefined) // Bug24296811 when there is only one element js receives it as string. so it has to be converted to array forcefully.
		search_table = [].concat(search_table);

	   count = 0;
       for (i=0; i < search_table.length; i++)
       {
          if (search_table[i].checked == true)
          count++;
       }
      if (count>200)
      {
        alert(" Right now, mass update can only handle 200 records!");
        return false;
      }
       top.document.results.submit();
       return true;
    }
}

function DetailedReport(f, action)
{
    if (AtLeastOneCheck())
        ChangeBugformAction(f, action);
}

function SubstTotalCount(total_count)
{
    var href;
    var total_count_loc;

    for (i = 0; i < total_count; i++)
    {
        href = top.document.links[i].href;
        total_count_loc = href.indexOf('TOTAL_COUNT');
        href = href.substring(0, total_count_loc) + total_count + href.substring(total_count_loc + 11, href.length);

        top.document.links[i].href = href;
    }
}

function FillRptnoAndSubmit(f, rptno_val)
{
    var n;

    n = new Number(rptno_val);

    if (n == 0 || isNaN(n))
    {
        alert("Please enter a single bug or enhancement number in the 'Bug/Enh Number' field.");
        return false;
    }

    f.rptno.value = rptno_val;
    return true;
}

function ReportCatChanged(new_id)
{
    if (top.bugframe.document.bugform.elements[top.bugframe.rptd_by_cat_msg_field].value == '')
        top.bugframe.document.bugform.elements[top.bugframe.rptd_by_cat_field + 1].value = new_id;
}

function SetRptdByFid(fid, msg)
{
    top.bugframe.document.bugform.elements[top.bugframe.rptd_by_cat_field + 1].value = fid;
    top.bugframe.document.bugform.elements[top.bugframe.rptd_by_cat_msg_field].value = msg;
}


function SetUntargeted()
{
    top.bugframe.document.bugform.elements[top.bugframe.do_by_release_untargeted_field].value = 'ONLY UNTARGETED';

}

function SetThirdNoValue()
{
    top.bugframe.document.bugform.elements[top.bugframe.third_party_novalue_field].value = 'NO VALUE';
}

function SetTestNameNoValue()
{
    top.bugframe.document.bugform.elements[top.bugframe.test_name_novalue_field].value = 'NO VALUE';
}

function SetDevPriNoValue()
{
    top.bugframe.document.bugform.elements[top.bugframe.dev_pri_novalue_field].value = 'NO VALUE';
}

function SetEscOpen()
{
    top.bugframe.document.bugform.elements[top.bugframe.esc_open_field].value = 'ONLY OPEN';
}


function ChangeBugformAction(f, action)
{
    f.action = action;
    f.submit();
}

function UseDefaultColumns(f, action)
{
    var i;

    f.action = action;

    if (f.c_count.value == 0)
    {
        savedColumns=GetSavedColumns();
        savedColumnsCount=savedColumns.length;

        if (savedColumnsCount>0)
        {
            for (i = 0; i < savedColumnsCount; i++)
                f.cid_arr[i].value = savedColumns[i];
        }
        else
        {
            for (i = 0; i < max_col_selection; i++)
                f.cid_arr[i].value = default_column[i];
        }
    }
    f.c_count.value = max_col_selection;
    f.submit();
}

function UseDefaultColumnsExt(f, allColumns, action)
{
    var i;
	var inFlag;
    f.action = action;

    if (f.c_count.value == 0)
    {
        savedColumns=GetSavedColumns();
        savedColumnsCount=savedColumns.length;
		allColumnsExt=allColumns.split(',');
        allColumnsExtCount=allColumnsExt.length;
        if (savedColumnsCount>0)
        {
            for (i = 0; i < savedColumnsCount; i++){
				for (j = 0; j < allColumnsExtCount; j++){
					if (allColumnsExt[j] == savedColumns[i] ) inFlag=true;
				}
				if ( inFlag )
				{f.cid_arr[i].value = savedColumns[i];
			}
			inFlag = false;
			}
        }
        else
        {
            for (i = 0; i < max_col_selection; i++)
                f.cid_arr[i].value = default_column[i];
        }
    }
    f.c_count.value = max_col_selection;
    f.submit();
}

function AddColumn(text, val)
{
    var o;
    var i;
    var j;
    var s;
    var t;

    i = self.colpicked.document.colform.picked.options.length;
    for (j=0; j<i; j++)
    {
        if (self.colpicked.document.colform.picked.options[j].value==val)
        {
            alert(text+' is already included in the list.');
            return;
        }
    }

    s = self.colpicked.document.colform.picked.selectedIndex;

    if (i == max_col_selection)
    {
        alert('You may only select a maximum of ' + max_col_selection + ' columns');
        return;
    }

    o = new Option(text, val, false, false);
    p = o;

    if (s != -1)
    {
        while (i > (s+1))
        {
            t = self.colpicked.document.colform.picked.options[i-1];

            self.colpicked.document.colform.picked.options[i] = new Option(t.text, t.value, false, false);

            i = i - 1;
        }
    }

    self.colpicked.document.colform.picked.options[i] = o;
    self.colpicked.document.colform.picked.selectedIndex = i;

}

function DeleteSelectedColumn()
{
    var i = self.colpicked.document.colform.picked.selectedIndex;
    if ( i != 0 ) {
    self.colpicked.document.colform.picked.options[i] = null;

    if (i <= self.colpicked.document.colform.picked.options.length)
        self.colpicked.document.colform.picked.selectedIndex = i;
	}
}

function FillColumnFields()
{
    var i;

    if (self.colpicked.document.colform.picked.options.length < 1)
    {
        alert("You must select at least one column.");
        return false;
    }

    for (i = 0; i<self.colpicked.document.colform.picked.options.length; i++)
    {
        self.colpicked.document.doneform.elements[i].value =
            self.colpicked.document.colform.picked.options[i].value;
    }

    self.colpicked.document.doneform.c_count.value = self.colpicked.document.colform.picked.options.length;

    return true;
}


force_full_list  = false;
query_mode       = false;
mass_update_mode = false;

customize_ids_path                 = server_html_path         + 'customize.html';
hide_or_unhide_path                = server_edit_package_path + 'hide_or_unhide_lines';
change_line_type_path              = server_edit_package_path + 'change_line_type';
edit_text_path                     = server_edit_package_path + 'edit_text';
escalate_path                      = server_esc_package_path  + 'escalate_bug';


status_code_list_EDA                 = server_lists_path + 'status_code_list_eda.html';
status_code_list_EDA_uid = 27;
status_code_list_CDA                 = server_lists_path + 'status_code_list_cda.html';
status_code_list_CDA_uid = 28;
status_code_list_DDA                 = server_lists_path + 'status_code_list_dda.html';
status_code_list_DDA_uid = 29;

product_suite_id_list              = server_lists_path + 'product_suite_id_list.html';
product_suite_id_list_uid = 26;
product_group_id_list              = server_lists_path + 'product_group_id_list.html';
product_group_id_list_uid = 30;
product_id_list                    = server_lists_path + 'product_id_list.html';
product_id_list_uid = 1;
component_code_list                = server_lists_path + 'component_code_list';  // completed at run-time
component_code_list_uid = 2;
severity_code_list                 = server_lists_path + 'severity_code_list.html';
severity_code_list_uid = 3;
status_code_list_B                 = server_lists_path + 'status_code_list_b.html';
status_code_list_B_uid = 4;
status_code_list_D                 = server_lists_path + 'status_code_list_d.html';
status_code_list_D_uid = 5;
status_code_list_E                 = server_lists_path + 'status_code_list_e.html';
status_code_list_E_uid = 6;
status_code_list_create            = server_lists_path + 'status_code_list_create.html';
status_code_list_create_uid = 7;
status_code_list_all               = server_lists_path + 'status_code_list_all.html';
status_code_list_all_uid = 15;
os_code_list                       = server_lists_path + 'os_code_list.html';
os_code_list_uid = 8;
genport_code_list                  = server_lists_path + 'genport_code_list.html';
genport_code_list_uid = 9;
mail_code_list                     = server_lists_path + 'mail_code_list.html';
mail_code_list_uid = 10;
dev_pri_code_list                  = server_lists_path + 'dev_pri_list.html';
dev_pri_code_query_list            = server_help_path + 'dev_pri_query_list.html';
dev_pri_code_list_uid = 11;
release_status_code_list           = server_lists_path + 'release_status_code_list.html';
release_status_code_list_uid = 12;
enh_desir_code_list                = server_lists_path + 'enh_desir_list.html';
enh_desir_code_list_uid = 13;
dev_cost_code_list                 = server_lists_path + 'dev_cost_list.html';
dev_cost_code_list_uid = 14;
port_exc_list                      = server_lists_path + 'port_exc_list.html';
port_exc_list_uid = 15;
cf_list                            = server_lists_path + 'cf_list.html';
cf_list_uid = 16;
pub_list                           = server_lists_path + 'pub_list.html';
pub_list_uid = 17;
esc_code_list                      = server_lists_path + 'esc_code_list.html';
esc_code_list_uid = 18;
status_code_list_all_single        = server_lists_path + 'status_code_list_all_single.html';
status_code_list_all_single_uid = 19;
subcomp_dir_list                   = server_lists_path + 'subcomp_dir_list.html';
subcomp_dir_list_uid = 20;
subcomp_code_list                  = server_lists_path + 'subcomp_code_list_'; // completed at run-time
subcomp_code_list_uid = 21;
requ_sid_list_sid = 22;
requ_sid_list                      = server_lists_path + 'requ_sid_list.html';
security_list_uid=23;
security_list                      = server_lists_path + 'security_list.html';
test_status_uid = 23;
test_priority_uid = 24;
test_status_code_list              = server_lists_path + 'test_status_list.html';
test_priority_code_list            = server_lists_path + 'test_priority_list.html';
mf_list_uid = 25;
mf_list                            = server_lists_path + 'mf_list.html';
release_list_uid = 26;
release_list                       = server_lists_path + 'release_list.html';
product_group_id_list              = server_lists_path + 'product_group_id_list.html';
security_compliance_list_uid=27
security_compliance_list           = server_lists_path + 'security_compliance_list.html';

ticket_source_help                 = server_help_path + 'ticket_source_help.html';
filer_org_query_help               = server_help_path + 'filer_org_query_help.html';
assignee_org_query_help            = server_help_path + 'assignee_org_query_help.html';
subscriber_query_help              = server_help_path + 'subscriber_query_help.html';

requ_sid_help                      = server_help_path + 'requ_sid_help.html';
bugno_like_help                    = server_help_path + 'bugno_like_help.html';
customer_help                      = server_help_path + 'customer_help.html';
component_code_query_help          = server_help_path + 'component_code_query_help.html';
product_query_help                 = server_help_path + 'product_query_help.html';
component_code_mass_upd_help       = server_help_path + 'component_code_mass_upd_help.html';
component_ver_help                 = server_help_path + 'component_ver_help.html';
found_in_label_help                = server_help_path + 'found_in_label_help.html';
fixed_in_label_help                = server_help_path + 'fixed_in_label_help.html';
customer_type_help                 = server_help_path + 'customer_type_help.html';
regression_status_help             = server_help_path + 'regression_status_help.html';
patch_del_method_help              = server_help_path + 'patch_del_method_help.html';
patch_rup_num_help                 = server_help_path + 'patch_rup_num_help.html';
patch_avail_date_help              = server_help_path + 'patch_avail_date_help.html';
rdbms_ver_help                     = server_help_path + 'rdbms_ver_help.html';
rdbms_ver_help_b                   = server_help_path + 'rdbms_ver_help_b.html'; // Bug# 1082311
broken_ver_help                    = server_help_path + 'broken_ver_help.html';
os_ver_help                        = server_help_path + 'os_ver_help.html';
comp_help                          = server_help_path + 'comp_help.html';
subcomp_help                       = server_help_path + 'subcomp_help.html';
subcomp_freeform_help              = server_help_path + 'subcomp_freeform_help.html';
subcomp_mass_upd_help              = server_help_path + 'subcomp_freeform_help.html';
lgkit_help                         = server_help_path + 'lgkit_help.html';
portexc_help                       = server_help_path + 'portexc_help.html';
err_help                           = server_help_path + 'err_help.html';
basebug_help                       = server_help_path + 'basebug_help.html';
tags_help                          = server_help_path + 'tags_help.html';
subject_help                       = server_help_path + 'subject_help.html';
bugdesc_help                       = server_help_path + 'bugdesc_help.html';
bugdesc_add_help                   = server_help_path + 'bugdesc_add_help.html';
bugdesc1_help                      = server_help_path + 'bugdesc1.html';
bugdesc2_help                      = server_help_path + 'bugdesc2.html';
bugdesc3_help                      = server_help_path + 'bugdesc3.html';
bugdesc4_help                      = server_help_path + 'bugdesc4.html';
bugdesc5_help                      = server_help_path + 'bugdesc5.html';
bugdesc6_help                      = server_help_path + 'bugdesc6.html';
bugdesc7_help                      = server_help_path + 'bugdesc7.html';
programmer_help                    = server_help_path + 'programmer_help.html';
reassign_help                      = server_help_path + 'reassign_help.html';
cf_help                            = server_help_path + 'cf_help.html';
do_by_release_help                 = server_help_path + 'do_by_release_help.html';
commit_fix_help                    = server_help_path + 'commit_fix_help.html';
version_fixed_help                 = server_help_path + 'version_fixed_help.html';
fix_avail_date_help                = server_help_path + 'fix_avail_date_help.html';
fix_eta_since_query_help           = server_help_path + 'fix_eta_since_query_help.html';
fix_eta_before_query_help          = server_help_path + 'fix_eta_before_query_help.html';
fix_within_days_query_help         = server_help_path + 'fix_within_days_query_help.html';
third_party_help                   = server_help_path + 'third_party_help.html';
test_name_help                     = server_help_path + 'test_name_help.html';
desc_owner_help                    = server_help_path + 'desc_owner_help.html';
pub_help                           = server_help_path + 'pub_help.html';
bug_line_type_help                 = server_help_path + 'bug_line_type_help.html';
enh_line_type_help                 = server_help_path + 'enh_line_type_help.html';
enh_text_help                      = server_help_path + 'enh_text_help.html';
bus_need_help                      = server_help_path + 'bus_need_help.html';
gen_enh_desc_help                  = server_help_path + 'gen_enh_desc_help.html';
rptno_list_help                    = server_help_path + 'rptno_list_help.html';
ticket_query_help                  = server_help_path + 'ticket_query_help.html';
ticket_source_help                 = server_help_path + 'ticket_source_help.html';
order_by_help                      = server_help_path + 'order_by_help.html';
rpt_title_help                     = server_help_path + 'rpt_title_help.html';
subject_query_help                 = server_help_path + 'subject_query_help.html';
tags_query_help                    = server_help_path + 'tags_query_help.html';
programmer_query_help              = server_help_path + 'programmer_query_help.html';
do_by_release_query_help           = server_help_path + 'do_by_release_query_help.html';
esc_open_query_help                = server_help_path + 'esc_open_query_help.html';
comp_wild_query_help               = server_help_path + 'comp_wild_query_help.html';
component_ver_query_help           = server_help_path + 'component_ver_query_help.html';
rptd_since_query_help              = server_help_path + 'rptd_since_query_help.html';
rptd_before_query_help             = server_help_path + 'rptd_before_query_help.html';
rptd_within_days_query_help        = server_help_path + 'rptd_within_days_query_help.html';
subcomp_query_help                 = server_help_path + 'subcomp_query_help.html';
subcomp_mass_upd_help              = server_help_path + 'subcomp_mass_upd_help.html';
rdbms_ver_query_help               = server_help_path + 'rdbms_ver_query_help.html';
err_query_help                     = server_help_path + 'err_query_help.html';
broken_ver_query_help              = server_help_path + 'broken_ver_query_help.html';
os_ver_query_help                  = server_help_path + 'os_ver_query_help.html';
lgkit_query_help                   = server_help_path + 'lgkit_query_help.html';
version_fixed_query_help           = server_help_path + 'version_fixed_query_help.html';
third_party_query_help             = server_help_path + 'third_party_query_help.html';
test_name_query_help               = server_help_path + 'test_name_query_help.html';
do_by_release_query_help           = server_help_path + 'do_by_release_query_help.html';
rptd_by_query_help                 = server_help_path + 'rptd_by_query_help.html';
customer_query_help                = server_help_path + 'customer_query_help.html';
desc_owner_query_help              = server_help_path + 'desc_owner_query_help.html';
basebug_query_help                 = server_help_path + 'basebug_query_help.html';
fixed_date_since_query_help        = server_help_path + 'fixed_date_since_query_help.html';
fixed_date_before_query_help       = server_help_path + 'fixed_date_before_query_help.html';
fixed_date_last_query_help         = server_help_path + 'fixed_date_last_query_help.html';
pub_date_since_query_help          = server_help_path + 'pub_date_since_query_help.html';
pub_date_before_query_help         = server_help_path + 'pub_date_before_query_help.html';
pub_date_last_query_help           = server_help_path + 'pub_date_last_query_help.html';
pub_by_query_help                  = server_help_path + 'pub_by_query_help.html';
upd_by_query_help                  = server_help_path + 'upd_by_query_help.html'; // Bug# 768768
dev_pri_novalue_query_help         = server_help_path + 'dev_pri_novalue_query_help.html';
upddate_since_query_help           = server_help_path + 'upddate_since_query_help.html';
upddate_before_query_help          = server_help_path + 'upddate_before_query_help.html';
upddate_last_query_help            = server_help_path + 'upddate_last_query_help.html';
mass_upd_comments_help             = server_help_path + 'mass_upd_comments_help.html';
remove_value_help                  = server_help_path + 'remove_value_help.html';
release_help                       = server_help_path + 'release_help.html';
release_query_help                 = server_help_path + 'release_query_help.html';
release_in_query_help              = server_help_path + 'release_in_query_help.html';
releases_affected_query_help       = server_help_path + 'releases_affected_query_help.html';
releases_affected_in_query_help    = server_help_path + 'releases_affected_in_query_help.html';
releases_affected_like_query_help  = server_help_path + 'releases_affected_like_query_help.html';
release_master_list                = server_lists_path + 'release_master_list.html';

bug_impacts_query_help             = server_help_path + 'bug_impacts_query_help.html';
bug_impacts_in_query_help          = server_help_path + 'bug_impacts_in_query_help.html';
bug_impacts_like_query_help        = server_help_path + 'bug_impacts_like_query_help.html';
bug_parameters_query_help          = server_help_path + 'bug_parameters_query_help.html';
bug_parameters_in_query_help       = server_help_path + 'bug_parameters_in_query_help.html';
bug_parameters_like_query_help     = server_help_path + 'bug_parameters_like_query_help.html';
bug_range_type_query_help          = server_help_path + 'bug_range_type_query_help.html';
bug_range_value_like_query_help    = server_help_path + 'bug_range_value_like_query_help.html';
blr_rfi_query_help                 = server_help_path + 'blr_rfi_query_help.html';
regression_status_query_help       = server_help_path + 'regression_status_query_help.html';
regression_cause_query_help        = server_help_path + 'regression_cause_query_help.html';
regression_base_bug_query_help     = server_help_path + 'regression_base_bug_query_help.html';

bug_tracking_group_name_query_help = server_help_path + 'bug_tracking_group_name_query_help.html';
bug_tracking_group_value_query_help= server_help_path + 'bug_tracking_group_value_query_help.html';

security_flag_help                 = server_help_path + 'security_flag_help.html';
security_compliance_help           = server_help_path + 'security_compliance_help.html';
security_compliance_query_help     = server_help_path + 'security_compliance_query_help.html';

resolution_process_help            = server_help_path + 'resolution_process_help.html';
resolution_activities_help         = server_help_path + 'resolution_activities_help.html';
skip_reason_help                   = server_help_path + 'skip_reason_help.html';
activity_state_help                = server_help_path + 'activity_state_help.html';
exp_finish_date_help               = server_help_path + 'exp_finish_date_help.html';

tg_mass_update_help                = server_help_path + 'tg_mass_update_help.html';
tg_value_mass_update_help          = server_help_path + 'tg_value_mass_update_help.html';

committed_query_help               = server_help_path + 'committed_query_help.html';
subject_prefix_help                = server_help_path + 'subject_prefix_help.html';
tags_mass_update_help              = server_help_path + 'tags_mass_update_help.html';
tags_find_replace_help             = server_help_path + 'tags_find_replace_help.html';
contacts_mass_update_help          = server_help_path + 'contacts_mass_update_help.html';
database_help                      = server_help_path + 'database_help.html';
bug_type_query_help                = server_help_path + 'bug_type_query_help.html';
sr_number_query_help               = server_help_path + 'sr_number_query_help.html';
sr_account_class_query_help        = server_help_path + 'sr_account_class_query_help.html';
sr_product_class_query_help        = server_help_path + 'sr_product_class_query_help.html';
sr_defect_class_query_help         = server_help_path + 'sr_defect_class_query_help.html';

rra_operating_system_field_help    = server_help_path + 'rra_operating_system_field_help.html';
rra_hardware_platform_field_help   = server_help_path + 'rra_hardware_platform_field_help.html';
rra_firmware_version_field_help    = server_help_path + 'rra_firmware_version_field_help.html';

sql_clause_help					   = server_help_path + 'sql_clause_help.html'; // added for ER 27441367

mf_help                            = server_help_path + 'mf_help.html';
product_id_help                    = server_help_path + 'product_id_help.html';
bps_help                           = server_help_path + 'bps_help.html';
customer_categories_help           = server_help_path + 'customer_categories_help.html';
security_compliance_help 		   = server_help_path + 'security_compliance_help.html'
copyas_help                        = server_help_path + 'copyas_help.html';
bugtype_help                       = server_help_path + 'bugtype_help.html';
empty_list                         = server_html_path + 'empty.html';


left_arrow                         = server_img_path  + 'arrow1.gif';
right_arrow                        = server_img_path  + 'arrow2.gif';

skip_notification_help             = server_help_path + 'skip_notification_help.html';

current_list = -1;
//added by amyu for layer, 12/03/98

var layerList = new Array();

function getLayer(name) {

  // Returns a handle to the named layer.

  if (document.layers)
    return(document.layers[name]);
  else if (document.all) {
    layer = eval('document.all.' + name + '.style');
    return(layer);
  }
  else
    return(null);
}


function createLayer(name, left, top, width, height, visible, content) {

  var z = layerList.length;
  var layer;

  layerList[z] = name;

  if (document.layers) {
    document.writeln('<layer name="' + name + '" left=' + left + ' top=' + top + ' width=' + width + ' height=' + height +  ' visibility=' + (visible ? '"show"' : '"hide"') + ' z-index=' + z + '>');
    document.writeln(content);
    document.writeln('</layer>');
    layer = getLayer(name);
    layer.width = width;
    layer.height = height;
  }

  if (document.all) {
    document.writeln('<div id="' + name + '" style="position:absolute; overflow:none; left:' + left + 'px; top:' + top + 'px; width:' + width + 'px; height:' + height + 'px;' + ' visibility:' + (visible ? 'visible;' : 'hidden;') + ' z-index:' + z + '">');
    document.writeln(content);
    document.writeln('</div>');
  }

  clipLayer(name, 0, 0, width, height);
}


function createLayerM(name, left, top, width, height, visible, content, mOver, mOut) {

  var z = layerList.length;
  var layer;

  layerList[z] = name;

  if (document.layers) {
    document.writeln('<layer name="' + name + '" onMouseOver="' + mOver + ';" onMouseOut="' + mOut + ';" left=' + left + ' top=' + top + ' width=' + width + ' height=' + height +  ' visibility=' + (visible ? '"show"' : '"hide"') + ' z-index=' + z + '>');
    document.writeln(content);
    document.writeln('</layer>');
    layer = getLayer(name);
    layer.width = width;
    layer.height = height;
  }

  if (document.all) {
    document.writeln('<div id="' + name + '" onMouseOver="' + mOver + ';" onMouseOut="' + mOut + ';" style="position:absolute; overflow:none; left:' + left + 'px; top:' + top + 'px; width:' + width + 'px; height:' + height + 'px;' + ' visibility:' + (visible ? 'visible;' : 'hidden;') + ' z-index:' + z + '">');
    document.writeln(content);
    document.writeln('</div>');
  }

  clipLayer(name, 0, 0, width, height);
}

function hideLayer(name) {

  var layer = getLayer(name);

  if (document.layers)
    layer.visibility = "hide";
  if (document.all)
    layer.visibility = "hidden";
}

function showLayer(name) {

  var layer = getLayer(name);

  if (document.layers)
    layer.visibility = "show";
  if (document.all)
    layer.visibility = "visible";
}

function isVisible(name) {

  var layer = getLayer(name);

  if (document.layers && layer.visibility == "show")
    return(true);
  if (document.all && layer.visibility == "visible")
    return(true);
  return(false);
}

function moveLayer(name, x, y) {

  var layer = getLayer(name);

  if (document.layers)
    layer.moveTo(x, y);
  if (document.all) {
    layer.left = x;
    layer.top  = y;
  }
}

// ====== 1998.11.11 ======
function moveByLayer(name, x, y) {

  var layer = getLayer(name);

  if (document.layers)
    layer.moveBy(x, y);
  if (document.all) {
    layer.left = x + parseInt(layer.left);
    layer.top  = y + parseInt(layer.top);
  }
}


var animRate = 25;    // Basically sets the update rate for animations.

function slideLayer(name, x, y, speed, code) {

  var layer = getLayer(name);

  // If the layer is currently being moved, cancel it.

  if (layer.slideID && layer.slideID != null)
    clearTimeout(layer.slideID);

  // Fix up all parameters.

  if (!code)
    code = "";

  // If any parameter other than 'name' is not an Array, make it one.

  x     = makeArray(x);
  y     = makeArray(y);
  speed = makeArray(speed);
  code  = makeArray(code);

  // Pad all arrays to the same length.

  var max = Math.max(x.length, Math.max(y.length, Math.max(speed.length, code.length)));
  while (x.length < max)
    x[x.length] = x[x.length - 1];
  while (y.length < max)
    y[y.length] = y[y.length - 1];
  while (speed.length < max)
    speed[speed.length] = speed[speed.length - 1];
  while (code.length < max)
    code[code.length] = code[code.length - 1];

  // Call the slide function with array parameters.

  goSlide(name, x, y, speed, code);
}

function goSlide(name, x, y, speed, code) {

  var layer = getLayer(name);
  var hrzn, vert, left, top, steps;

  if (document.layers) {
    hrzn = x[0] - layer.left;
    vert = y[0] - layer.top;
    left = layer.left;
    top  = layer.top;
  }

  if (document.all) {
    hrzn = x[0] - layer.pixelLeft;
    vert = y[0] - layer.pixelTop;
    left = layer.pixelLeft;
    top  = layer.pixelTop;
  }

  // Calculate how many steps it will take and the size of each step.

  steps = (Math.max(Math.abs(hrzn), Math.abs(vert)) / speed[0]) * (1000 / animRate);

  if (steps <= 0)
    return;

  // Save remaining array values.

  layer.slideX     = x.slice(1, x.length);
  layer.slideY     = y.slice(1, y.length);
  layer.slideSpeed = speed.slice(1, speed.length);
  layer.slideCode  = code.slice(1, code.length);

  // Set up movement values.

  layer.slideLeft   = left;
  layer.slideTop    = top;
  layer.slideDx     = hrzn / steps;
  layer.slideDy     = vert / steps;
  layer.slideFinalX = x[0];
  layer.slideFinalY = y[0];
  layer.slideSteps  = Math.floor(steps);
  layer.slideAction = code[0];

  // Start the slide.

  slideStep(name);
}

function slideStep(name) {

  // Moves the layer one step.

  var layer = getLayer(name);

  layer.slideLeft += layer.slideDx;
  layer.slideTop  += layer.slideDy;
  if (document.layers)
    layer.moveTo(layer.slideLeft, layer.slideTop);
  if (document.all) {
    layer.left = layer.slideLeft;
    layer.top  = layer.slideTop;
  }

  // If more steps remain, call this function again.

  if (layer.slideSteps-- > 0)
    layer.slideID = setTimeout('slideStep("' + name + '")', animRate);

  // Otherwise, move layer to final position, execute the any code and look for more slide parameters.

  else {
   if (document.layers)
      layer.moveTo(layer.slideFinalX, layer.slideFinalY);
    if (document.all) {
      layer.left = layer.slideFinalX;
      layer.top  = layer.slideFinalY;
    }

    // Execute code, if any.

    layer.slideID = null;
    if (layer.slideAction != "")
      eval(layer.slideAction);

    // If any more slide parameters are left, start a new slide.

    if (layer.slideX.length > 0)
      goSlide(name, layer.slideX, layer.slideY, layer.slideSpeed, layer.slideCode);
    else
      layer.slideID = null;
  }
}

function clipLayer(name, clipleft, cliptop, clipright, clipbottom) {

  var layer = getLayer(name);

  if (document.layers) {
    layer.clip.left   = clipleft;
    layer.clip.top    = cliptop;
    layer.clip.right  = clipright;
    layer.clip.bottom = clipbottom;
  }
  if (document.all)
    layer.clip = 'rect(' + cliptop + ' ' +  clipright + ' ' + clipbottom + ' ' + clipleft +')';
}

function swipeLayer(name, clipleft, cliptop, clipright, clipbottom, speed, code) {

  var layer = getLayer(name);

  // If the layer is currently being clipped, cancel it.

  if (layer.swipeID && layer.swipeID != null)
    clearTimeout(layer.swipeID);

  // Fix up all parameters.

  if (!code)
    code = "";

  // If any parameter other than 'name' is not an Array, make it one.

  clipleft   = makeArray(clipleft);
  cliptop    = makeArray(cliptop);
  clipright  = makeArray(clipright);
  clipbottom = makeArray(clipbottom);
  speed      = makeArray(speed);
  code       = makeArray(code);

  // Pad all arrays to the same length.

  var max = Math.max(clipleft.length, Math.max(clipright.length, Math.max(cliptop.length, Math.max(clipbottom.length, Math.max(speed.length, code.length)))));
  while (clipleft.length < max)
    clipleft[clipleft.length] = clipleft[clipleft.length - 1];
  while (clipright.length < max)
    clipright[clipright.length] = clipright[clipright.length - 1];
  while (cliptop.length < max)
    cliptop[cliptop.length] = cliptop[cliptop.length - 1];
  while (clipbottom.length < max)
    clipbottom[clipbottom.length] = clipbottom[clipbottom.length - 1];
  while (speed.length < max)
    speed[speed.length] = speed[speed.length - 1];
  while (code.length < max)
    code[code.length] = code[code.length - 1];

  // Call the swipe function with array parameters.

  goSwipe(name, clipleft, cliptop, clipright, clipbottom, speed, code)
}

function goSwipe(name, clipleft, cliptop, clipright, clipbottom, speed, code) {

  var layer = getLayer(name);

  var hrzn1, vert1;
  var hrzn2, vert2;
  var max1, max2;
  var steps;

  if (document.layers) {
    hrzn1 = clipleft[0] - layer.clip.left;
    vert1 = cliptop[0] - layer.clip.top;
    hrzn2 = clipright[0] - layer.clip.right;
    vert2 = clipbottom[0] - layer.clip.bottom;
  }
  if (document.all) {
    if (!layer.clip)
      clipLayer(name, 0, 0, layer.pixelWidth, layer.pixelHeight);
    var clip = getClipValues(layer.clip);
    hrzn1 = clipleft[0] - clip[3];
    vert1 = cliptop[0] - clip[0];
    hrzn2 = clipright[0] - clip[1];
    vert2 = clipbottom[0] - clip[2];
  }
  max1 = Math.max(Math.abs(hrzn1), Math.abs(vert1));
  max2 = Math.max(Math.abs(hrzn2), Math.abs(vert2));
  steps = (Math.max(max1, max2) / speed[0]) * (1000 / animRate);

  if (steps <= 0)
    return;

  // Save remaining array values.

  layer.swipeClipleft   = clipleft.slice(1, clipleft.length);
  layer.swipeCliptop    = cliptop.slice(1, cliptop.length);
  layer.swipeClipright  = clipright.slice(1, clipright.length);
  layer.swipeClipbottom = clipbottom.slice(1, clipbottom.length);
  layer.swipeSpeed      = speed.slice(1, speed.length);
  layer.swipeCode       = code.slice(1, code.length);

  // Set up clipping values.

  if (document.layers) {
    layer.swipeLeft   = layer.clip.left;
    layer.swipeTop    = layer.clip.top;
    layer.swipeRight  = layer.clip.right;
    layer.swipeBottom = layer.clip.bottom;
  }
  if (document.all) {
    layer.swipeLeft   = parseInt(clip[3], 10);
    layer.swipeTop    = parseInt(clip[0], 10);
    layer.swipeRight  = parseInt(clip[1], 10);
    layer.swipeBottom = parseInt(clip[2], 10);
  }
  layer.swipeDx1         = hrzn1 / steps;
  layer.swipeDy1         = vert1 / steps;
  layer.swipeDx2         = hrzn2 / steps;
  layer.swipeDy2         = vert2 / steps;
  layer.swipeFinalLeft   = clipleft[0];
  layer.swipeFinalTop    = cliptop[0];
  layer.swipeFinalRight  = clipright[0];
  layer.swipeFinalBottom = clipbottom[0];
  layer.swipeSteps       = Math.floor(steps);
  layer.swipeAction      = code[0];

  // Start the swipe.

  swipeStep(name);
}

function swipeStep(name) {

  var layer = getLayer(name);

  // Adjust the layer's clipping area by one step.

  layer.swipeLeft   += layer.swipeDx1;
  layer.swipeTop    += layer.swipeDy1;
  layer.swipeRight  += layer.swipeDx2;
  layer.swipeBottom += layer.swipeDy2;

  if (document.layers) {
    layer.clip.left   = layer.swipeLeft;
    layer.clip.top    = layer.swipeTop;
    layer.clip.right  = layer.swipeRight;
    layer.clip.bottom = layer.swipeBottom;
  }
  if (document.all)
    layer.clip = 'rect(' + layer.swipeTop + ' ' + layer.swipeRight + ' ' + layer.swipeBottom + ' ' + layer.swipeLeft +')';

  // If more steps remain, call this function again.

  if (--layer.swipeSteps > 0)
    layer.swipeID = setTimeout('swipeStep("' + name + '")', animRate);

  // Otherwise, set layer's final clip area, execute the any code and look for more swipe parameters.

  else {
    if (document.layers) {
      layer.clip.left   = Math.round(layer.swipeFinalLeft);
      layer.clip.top    = Math.round(layer.swipeFinalTop);
      layer.clip.right  = Math.round(layer.swipeFinalRight);
      layer.clip.bottom = Math.round(layer.swipeFinalBottom);
    }
    if (document.all)
      layer.clip = 'rect(' + layer.swipeFinalTop + ' ' + layer.swipeFinalRight + ' ' + layer.swipeFinalBottom + ' ' + layer.swipeFinalLeft +')';

    // Execute code, if any.

    if (layer.swipeAction != "")
      eval(layer.swipeAction);

    // If any more swipe parameters are left, start a new swipe.

    if (layer.swipeClipleft.length > 0)
      goSwipe(name, layer.swipeClipleft, layer.swipeCliptop, layer.swipeClipright, layer.swipeClipbottom, layer.swipeSpeed, layer.swipeCode);
    else
      layer.swipeID = null;
  }
}

function scrollLayer(name, dx, dy) {

  var cl = getClipLeft(name);
  var ct = getClipTop(name);
  var cr = getClipRight(name);
  var cb = getClipBottom(name);
  var l  = getLeft(name);
  var t  = getTop(name);

  // If scrolling the given amounts would move past the edges of the layer,
  // adjust the values so we stop right at the edge.

  if (cl + dx < 0)
    dx = -cl;
  else if (cr + dx > getWidth(name))
    dx = getWidth(name) - cr;
  if (ct + dy < 0)
    dy = -ct;
  else if (cb + dy > getHeight(name))
    dy = getHeight(name) - cb;

  // Move both the clipping region and the layer so that the contents move
  // but the viewable region of the layer appears fixed relative to the page.

  clipLayer(name, cl + dx, ct + dy, cr + dx, cb + dy);
  moveLayer(name, l - dx, t - dy);
}


function setBgColor(name, color) {

  var layer = getLayer(name);

  if (document.layers)
    layer.bgColor = color;
  else if (document.all)
    layer.backgroundColor = color;
}

function setBgImage(name, imagesrc) {

  var layer = getLayer(name);

  if (document.layers)
    layer.background.src = imagesrc;
  else if (document.all)
    layer.backgroundImage = "url(" + imagesrc + ")";
}

function replaceContent(name, content) {

  if (document.layers) {
    var layer = getLayer(name);
    layer.document.open();
    layer.document.writeln(content);
    layer.document.close();
  }
  else if (document.all) {
    var str = "document.all." + name + ".innerHTML = '" + content + "'";
    eval(str);
  }
}

function getLeft(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.left);
  else if (document.all)
    return(layer.pixelLeft);
  else
    return(null);
}

function getTop(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.top);
  else if (document.all)
    return(layer.pixelTop);
  else
    return(null);
}

function getRight(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.left + layer.width);
  else if (document.all)
    return(layer.pixelLeft + layer.pixelWidth);
  else
    return(null);
}

function getBottom(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.top + layer.height);
  else if (document.all)
    return(layer.pixelTop + layer.pixelHeight);
  else
    return(null);
}

function getWidth(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.width);
  else if (document.all)
    return(layer.pixelWidth);
  else
    return(null)
}

function getHeight(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.height);
  else if (document.all)
    return(layer.pixelHeight);
  else
    return(null);
}

function getClipLeft(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.clip.left);
  else if (document.all) {
    var str =  layer.clip;
    if (!str)
      return(0);
    var clip = getClipValues(layer.clip);
    return(clip[3]);
  }
  else
    return(null);
}

function getClipTop(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.clip.top);
  else if (document.all) {
    var str =  layer.clip;
    if (!str)
      return(0);
    var clip = getClipValues(layer.clip);
    return(clip[0]);
  }
  else
    return(null);
}

function getClipRight(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.clip.right);
  else if (document.all) {
    var str =  layer.clip;
    if (!str)
      return(layer.pixelWidth);
    var clip = getClipValues(layer.clip);
    return(clip[1]);
  }
  else
    return(null);
}

function getClipBottom(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.clip.bottom);
  else if (document.all) {
    var str =  layer.clip;
    if (!str)
      return(layer.pixelHeight);
    var clip = getClipValues(layer.clip);
    return(clip[2]);
  }
  else
    return(null);
}

function getClipWidth(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.clip.width);
  else if (document.all) {
    var str =  layer.clip;
    if (!str)
      return(layer.pixelWidth);
    var clip = getClipValues(layer.clip);
    return(clip[1] - clip[3]);
  }
  else
    return(null);
}

function getClipHeight(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.clip.height);
  else if (document.all) {
    var str =  layer.clip;
    if (!str)
      return(layer.pixelHeight);
    var clip = getClipValues(layer.clip);
    return(clip[2] - clip[0]);
  }
  else
    return(null);
}

function getWinWidth() {

  if (document.layers)
    return(window.innerWidth);
  else if (document.all)
    return(document.body.clientWidth);
  else
    return(null);
}

function getWinHeight() {

  if (document.layers)
    return(window.innerHeight);
  else if (document.all)
    return(document.body.clientHeight);
  else
    return(null);
}

function getzIndex(name) {

  var layer = getLayer(name);

  if (document.layers)
    return(layer.zIndex);
  else if (document.all)
    return(layer.zIndex);
  else
    return(null);
}

function setzIndex(name, z) {

  var layer = getLayer(name);

  if (document.layers)
    layer.zIndex = z;
  if (document.all)
    layer.zIndex = z;
}

function bringToFront(name) {

  var i, temp;

  layerList.sort(sortzIndex);

  i = layerList.length - 1;
  temp = getzIndex(layerList[i]);
  while (i > 0 && layerList[i] != name) {
    setzIndex(layerList[i], getzIndex(layerList[i - 1]));
    i--;
  }
  setzIndex(name, temp);
}

function sendToBack(name) {

  var i, temp;

  layerList.sort(sortzIndex);
  i = 0;
  temp = getzIndex(layerList[i]);
  while (i < layerList.length - 2 && layerList[i] != name) {
    setzIndex(layerList[i], getzIndex(layerList[i + 1]));
    i++;
  }
  setzIndex(name, temp);
}

function sortzIndex(a, b) {

  return(getzIndex(a) - getzIndex(b));
}

function getImgSrc(imagename) {

  var i, layer;

  // If the image exists in the document object, return the source.

  if (document.images[imagename])
    return document.images[imagename].src;

  // Otherwise, for Netscape, search through the layers for the named image.

  else if (document.layers)
    for (i = 0; i < layerList.length; i++) {
      layer = getLayer(layerList[i]);
      if (layer.document.images[imagename])
        return layer.document.images[imagename].src;
    }

  return(null);
}

function setImgSrc(imagename, imagesrc) {

  var i, layer;

  // If the image exists in the document object, change the source.

  if (document.images[imagename]) {
    document.images[imagename].src = imagesrc;
    return;
  }

  // Otherwise, for Netscape, search through the layers for the named image.

  else if (document.layers) {
    var found = false;
    for (i = 0; i < layerList.length && !found; i++) {
      layer = getLayer(layerList[i]);
      if (layer.document.images[imagename]) {
        layer.document.images[imagename].src = imagesrc;
        found = true;
      }
    }
  }
}

function getClipValues(str) {

  var clip = new Array();
  var i;

  // Parse out the clipping values for IE layers.

  i = str.indexOf("(");
  clip[0] = parseInt(str.substring(i + 1, str.length), 10);
  i = str.indexOf(" ", i + 1);
  clip[1] = parseInt(str.substring(i + 1, str.length), 10);
  i = str.indexOf(" ", i + 1);
  clip[2] = parseInt(str.substring(i + 1, str.length), 10);
  i = str.indexOf(" ", i + 1);
  clip[3] = parseInt(str.substring(i + 1, str.length), 10);
  return(clip);
}
function getLayer(name) {

  // Returns a handle to the named layer.

  if (document.layers)
    return(document.layers[name]);
  else if (document.all) {
    layer = eval('document.all.' + name + '.style');
    return(layer);
  }
  else
    return(null);
}

function makeArray(a) {

  var temp;

  if (!a.join) {
    temp = a;
    a = new Array();
    a[0] = temp;
  }
  return a;
}
function checkNumber(a) {
temp=a.value;
arrayOfStrings = temp.split(',');
for (var i=0; i<arrayOfStrings.length; i++) {
    if (isNaN(arrayOfStrings[i])) {
    alert('Please input a number for this field\n');
    a.focus();
    a.select();
    return false;
    }
    else return true;
}
return true;
}

function SetCookie(cName, cValue)
{
// Bug# 1099665 Cookie for storing the state of the new checkBox.
   var longyears = new Date();
   longyears.setFullYear(longyears.getFullYear() + 10);
   cName += "=";
   document.cookie = cName + cValue + "; expires=" + longyears.toGMTString(); + "; path=/; secure;";
   if (document.cookie.length <= 0)   {      alert('The Cookie ' + cName + ' could not be stored.');   }
}

function SetTarget(form_num, on_off)
{
// Bug# 1099665 Cookie to set the form target (new or same window)
   if (on_off == 'on')
      document.forms[form_num].target = '_blank';
   else
      document.forms[form_num].target = '_self';
}
function ShowBug(root_path, rptno)
{
// Bug# 1099665 new function to show the bug
//
// Bug# 1141209 removing the leading spaces
   while (rptno[0] == ' ')
   {
      rptno = rptno.substr(1);
   }

   var url = root_path + 'webbug_print.show?c_rptno=' + rptno;
   if (top.GetCookie("new_window") == "on")
      self.window.open(url, '_blank');
   else
      self.window.location = url;
}

function ShowBugExt(root_path, rptno)
{
   while (rptno[0] == ' ')
   {
      rptno = rptno.substr(1);
   }

   var url = root_path + 'webbug_print_ext.show?c_rptno=' + rptno;
   if (top.GetCookie("new_window") == "on")
      self.window.open(url, '_blank');
   else
      self.window.location = url;
}


function checkFocus()
{
// Bug# 1099665 forms[1] from forms[0], call to changeCheckBoxValue()
//
   document.forms[1].rptno.focus();
   var cookieValue = top.GetCookie("new_window");
   if (cookieValue == 'on')
      document.checkform.new_window.checked = true;
   else
      document.checkform.new_window.checked = false;
   changeCheckBoxValue();
}

function changeCheckBoxValue()
{
// Bug# 1099665 new function for the new checkBox
//
   if (document.checkform.new_window.checked == true)
      document.checkform.new_window.value='on';
   else
      document.checkform.new_window.value='off';
   top.SetTarget(           1, document.checkform.new_window.value);
   top.SetCookie("new_window", document.checkform.new_window.value);
}


function OpenWindow(mode)
{
// Bug# 1099665 new function for the new checkBox
//
   if (document.checkform.new_window.value =='on')
		if (mode == 'EDIT')
			window.open('/pls/bug/webbug_home.openui?prptno='+document.myform.rptno.value);
		else if (mode == 'SHOW')
			window.open('/pls/bug/webbug_home.openui?prptno='+document.myform.rptno.value+'&pui=SHOW');
		else
			window.open('/pls/bug/webbug_print.customer_preview?c_rptno='+document.myform.rptno.value);
   else
     		if (mode == 'EDIT')
			window.open('/pls/bug/webbug_home.openui?prptno='+document.myform.rptno.value,"_self");
		else if (mode == 'SHOW')
			window.open('/pls/bug/webbug_home.openui?prptno='+document.myform.rptno.value+'&pui=SHOW',"_self");
		else
			window.open('/pls/bug/webbug_print.customer_preview?c_rptno='+document.myform.rptno.value,"_self");
}



function GetXmlHttpObject()
{
// function for AJAX. robert.joseph 1st Aug 2008

   var xmlHttp=null;
   try
   {
      xmlHttp=new XMLHttpRequest();// Firefox, Opera 8.0+, Safari
   }
   catch (e)
   {
      try
      {
         xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");// Internet Explorer
      }
      catch (e)
      {
         xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");
      }
   }
   return xmlHttp;
}


function expandText(objTextArea){
		objTextArea.rows="15";

	}
function retractText(objTextArea){
		objTextArea.rows="1";
	}

// 	getConsolidatedBugComment added for ER 20958442
/* This consolidates DWB Template field content / Bug entry template content / regular bug comment content
   so that sensitive text match can be done on the whole block together */
function getConsolidatedBugComment(){
	var consolidatedText = null;
	var dwbTemplate = top.bugframe.document.getElementsByName("P_QUESTION_ID");
	if (dwbTemplate && dwbTemplate.length){
		for (i=0;i<dwbTemplate.length;i++)
			consolidatedText +="\n"+top.bugframe.document.bugform.P_ANSWER[i].value;
	}
	else {
		var bugTemplate = top.bugframe.document.getElementsByName("bug_desc");
		for (i=0;i<bugTemplate.length;i++)
		  consolidatedText +="\n"+bugTemplate[i].value;
	}
	return consolidatedText;
}

// ER 20958442 validateSensitiveText is called from Bug UI to check whether sensitive keywords are present in the bug comment and alert the user
function validateSensitiveText(text)	{
	  var regexExactMatch = new RegExp(top.gkeywordlistarr.join("|"),'im');
	  if (text == undefined || text.length <= 0)
      	  text = getConsolidatedBugComment();
	  if (text && text.length > 0 && regexExactMatch.test(text))
	  {
	     if (!confirm("Sensitive content is found in the bug comment. Lines containing sensitive keywords will be hidden. \nNote: If the sensitive keyword is split between lines, system will not auto hide the line.\n\nDo you want to continue?"))
           return false;
		 else
		   return true;
	  }
	  else
	  {
		  return true;
	  }
}


function ConvertToLocal(cTime,cTimeZone)
{
	if (cTimeZone == 'SERVER' ) {
		cTime = cTime.charAt(0).toUpperCase() + cTime.slice(1) + ' PT';
	return cTime;
	}
	var cTimewithTZ  = cTime+' '+cTimeZone;
	var c_rptdate_tz = new Date(cTimewithTZ);
    var c_date = c_rptdate_tz.toString().substring(0, 70);
    var c_date1 = c_date.substring(0,c_date.indexOf("("));
    var c_date2 = c_date.substring(c_date.indexOf("("));
	var c_rptdate_tz1 = c_date1+' '+c_date2.replace(/[a-z ]/g, "");
	return (c_date1.trim() == "" || c_date2.trim() == "") ? c_date : c_rptdate_tz1 ;
}


function teAnswerFromCache(cQuestionId)
{
	var cacheTEarray = new Array();
	var teHash = new Array();
	cacheTEarray = top.Split(sessionStorage["prevTemplate"], ",");
	for (i = 0; i < cacheTEarray.length; i++) {
		var keyValuePair = cacheTEarray[i].replace(/ /g,"").split("=");
		teHash[ keyValuePair[0] ] = keyValuePair[1];
    };
	return teHash[cQuestionId];
}
